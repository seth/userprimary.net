Adding to the momentum behind non-relational <em>simple databases</em>, Amazon announced its <a href="http://www.amazon.com/gp/browse.html?node=342335011" title="Amazon's simpleDB main page">simpleDB</a> web service product.  As described on the simpleDB main page,

<blockquote><span style="font-size:12pt;">Amazon SimpleDB is a web service for running queries on structured data in real time. This service works in close conjunction with Amazon Simple Storage Service (Amazon S3) and Amazon Elastic Compute Cloud (Amazon EC2), collectively providing the ability to store, process and query data sets in the cloud. These services are designed to make web-scale computing easier and more cost-effective for developers.
</span></blockquote>SimpleDB shares a number of similarities with <a href="http://couchdb.org/CouchDB/CouchDBWeb.nsf/Home?OpenForm" title="couchDB homepage">couchDB</a> which describes itself on the <a href="http://www.couchdbwiki.com/index.php?title=CouchDb_Quick_Overview" title="CouchDb_Quick_Overview">couchDB Quick Overview</a> as:


<blockquote style="font-size:12pt;">A document database server, accessible via a RESTful JSON API.
Ad-hoc and schema-free with a flat address space.
Distributed, featuring robust, incremental replication with bi-directional conflict detection and management.
Query-able and index-able, featuring a table oriented reporting engine that uses Javascript as a query language.</blockquote>Both provide a simple RESTful API, although SimpleDB looks like it is more XML based whereas CouchDB uses JSON.  Both provide access to an ad-hoc database of items (or documents in CouchDB parlance) that consist of key/value pairs and each provides a mechanism to query the items by their contents.  And both are implemented using <a href="http://www.erlang.org/" title="Erlang homepage">Erlang</a> (CouchDB for sure, simpleDB according to <a href="http://www.satine.org/archives/2007/12/13/amazon-simpledb/" title="SimpleDB post on Inside Looking Out">this post</a> on <a href="http://www.satine.org/">Inside Looking Out</a>).

While the similarity between SimpleDB and CouchDB is quite evident, it wasn't until I read over the <em>Detailed Description</em> section of the SimpleDB <a href="http://www.amazon.com/gp/browse.html?node=342335011" title="scroll down to Detailed Description">main-page</a> that I realized that document databases, where documents consist of key/value pairs, are really very close to Google's <a href="http://labs.google.com/papers/bigtable.html">BigTable</a> concept (you just have to turn your head and squint a bit).  To get a feel for this, take a look at the description of <a href="http://wiki.apache.org/lucene-hadoop/Hbase/HbaseArchitecture">Hbase's data model</a> (Hbase is an open source BigTable-like simple database that integrates with <a href="http://lucene.apache.org/hadoop/">Hadoop</a>) and compare to SimpleDB and CouchDB.

Aside from the buzz, I've been thinking a lot recently about simple databases and how a fast, highly scalable, and flexible key/value store is an essential component of just about any serious web application.  And I've been lamenting that an open source implementation that can be used as a building block of web-scale applications doesn't yet exist (although in time, projects like <a href="http://couchdb.org/CouchDB/CouchDBWeb.nsf/Home?OpenForm">CouchDB</a>, <a href="http://wiki.apache.org/lucene-hadoop/Hbase">Hbase</a>, and <a href="http://code.google.com/p/thrudb/">ThruDB</a> may fill this void).  Despite not being free, nor open source, perhaps Amazon's SimpleDB is the building block I've been looking for.  But I'm not sure.

For one thing, I'm wary of ending up with a web app that is tightly coupled to AWS.  EC2 makes a lot of sense to me because the boundary between your app and AWS is clear.  In that model you can run your app on your servers and deploy extra nodes to EC2 when you need more power.  But without a local alternative to SimpleDB, one would have to be very careful not to end up with an app that can only run on AWS -- and that also complicates the development process since you can develop and test offline.  The cost model of SimpleDB is attractive, so in the end I guess my concern boils down to not having a non-AWS local only solution...

Another aspect that I'm uncertain of is the choice of XML (or JSON for CouchDB).  For real-time processing of large volumes of documents, I think it may make more sense to have a more compact data representation and have interfaces that are more integrated into the programming languages being used.  For this, I really like what the Facebook developers have made available in the <a href="http://developers.facebook.com/thrift/">Thrift project</a>.  Although such an approach makes the schema somewhat less flexible, I'd really like to see a simple database that makes use of thrift and focus on speed and scalability.  Sounds like a perfect project to dive into learning Erlang in the spare time I don't have :-)

<span style="color:#ff0000;">Edited to add</span>:
<a href="http://www.automatthew.com/2007/12/amazon-simpledb-and-couchdb-compared.html" title="Post on The Electrofriend">This post</a> has a more detailed SimpleDB vs CouchDB comparison.

<!-- technorati tags start --><p style="text-align:right;font-size:10px;">Technorati Tags: <a href="http://www.technorati.com/tag/databases" rel="tag">databases</a>, <a href="http://www.technorati.com/tag/programming" rel="tag">programming</a>, <a href="http://www.technorati.com/tag/scalability" rel="tag">scalability</a></p><!-- technorati tags end -->
